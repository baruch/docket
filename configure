#!/usr/bin/python

common_srcs = [
        'tar'
]

docketd_srcs = [
        'docketd', 'special_arg', 'dev_list'
]

docket_srcs = [
        'docket'
]

apps = {
        'docketd': docketd_srcs,
        'docket': docket_srcs,
}

cflags = ['-I.', '-Ilibwire/include', '-g', '-O0', '-Wall', '-Werror', '-D_GNU_SOURCE']
ldflags = [ '-lpthread' ]

import os, os.path
import ninja_syntax

n = ninja_syntax.Writer(file('build.ninja', 'w'))
n.comment('Auto generated by ./configure, edit the configure script instead')
n.newline()

def shell_escape(str):
        """Escape str such that it's interpreted as a single argument by
           the shell."""
        # This isn't complete, but it's just enough to make NINJA_PYTHON work.
        if '"' in str:
                return "'%s'" % str.replace("'", "\\'")
        return str


n.variable('cflags', ' '.join(shell_escape(flag) for flag in cflags))
n.variable('ldflags', ' '.join(shell_escape(flag) for flag in ldflags))
n.newline()

n.rule('c',
        command='gcc -MMD -MT $out -MF $out.d $cflags -c $in -o $out',
        depfile='$out.d',
        deps='gcc',
        description='CC $out'
)
n.newline()

n.rule('ar',
        command='rm -f $out && ar crs $out $in',
        description='AR $out',
)
n.newline()

n.rule('link',
        command='gcc -o $out $in $libs $ldflags',
        description='LINK $out'
)
n.newline()

def src(filename):
        return os.path.join('src', filename)
def built(filename):
        return os.path.join('built', filename)
def cc(filename, src, **kwargs):
        return n.build(built(filename) + '.o', 'c', src(filename) + '.c', **kwargs)

all_targets = []

lib = ['libwire.a']
srcs_tags = []

common_objs = []
for source in common_srcs:
    srcs_tags.append(src(source) + '.c')
    common_objs += cc(source, src)

for app in apps:
    objs = []
    for source in apps[app]:
        srcs_tags.append(src(source) + '.c')
        objs += cc(source, src)
    all_targets += n.build(app, 'link', objs + common_objs, implicit=lib, variables=[('libs', lib)])
    n.newline()

#test_exec = []
#for test in test_srcs.keys():
#        objs = []
#        for source in test_srcs[test]:
#                objs += cc(source, btest)
#        test_exec += n.build(test, 'link', objs, implicit=lib, variables=[('libs', lib)])
#        all_targets += test_exec
#n.newline()

n.rule('configure',
        command='./configure',
        description='CONFIGURE build.ninja',
        generator=True
        )
all_targets += n.build('build.ninja', 'configure', implicit='./configure')
n.newline()

#n.rule('libwire_configure',
#        command='cd libwire && ./configure',
#        description='CONFIGURE libwire build.ninja',
#        generator=True
#        )
#n.build('libwire/build.ninja', 'libwire_configure', implicit='libwire/configure')
n.subninja('build.ninja.libwire')
n.newline()

n.rule('tags',
        command='ctags -R',
        description='CTAGS $out'
        )
all_targets += n.build('tags', 'tags', srcs_tags)
n.newline()

n.build('all', 'phony', all_targets)
n.default('all')
